-- =========================================
-- SISTEMA DE BANCO DE DADOS - ALUNOS E CURSOS
-- =========================================

-- 1. CRIAÇÃO DAS TABELAS COM CHAVES PRIMÁRIAS E ESTRANGEIRAS
-- =========================================

-- Tabela CIDADES (deve ser criada primeiro por ser referenciada)
CREATE TABLE cidades (
    id_cidade INT PRIMARY KEY AUTO_INCREMENT,
    nome_cidade VARCHAR(100) NOT NULL,
    estado VARCHAR(2) NOT NULL
);

-- Tabela CURSOS
CREATE TABLE cursos (
    id_curso INT PRIMARY KEY AUTO_INCREMENT,
    nome_curso VARCHAR(100) NOT NULL
);

-- Tabela ALUNOS (referencia cidades)
CREATE TABLE alunos (
    id_aluno INT PRIMARY KEY AUTO_INCREMENT,
    nome_aluno VARCHAR(100) NOT NULL,
    id_cidade INT NOT NULL,
    FOREIGN KEY (id_cidade) REFERENCES cidades(id_cidade)
);

-- Tabela MATRICULAS (tabela associativa - referencia alunos e cursos)
CREATE TABLE matriculas (
    id_matricula INT PRIMARY KEY AUTO_INCREMENT,
    id_aluno INT NOT NULL,
    id_curso INT NOT NULL,
    data_matricula DATE DEFAULT CURRENT_DATE,
    FOREIGN KEY (id_aluno) REFERENCES alunos(id_aluno),
    FOREIGN KEY (id_curso) REFERENCES cursos(id_curso),
    UNIQUE KEY unique_matricula (id_aluno, id_curso) -- Evita matrícula duplicada
);

-- =========================================
-- 2. INSERÇÃO DOS DADOS
-- =========================================

-- Inserir dados na tabela CIDADES
INSERT INTO cidades (nome_cidade, estado) VALUES
('São Paulo', 'SP'),
('Rio de Janeiro', 'RJ'),
('Belo Horizonte', 'MG'),
('Curitiba', 'PR'),
('Porto Alegre', 'RS'),
('Salvador', 'BA'),
('Fortaleza', 'CE'),
('Brasília', 'DF'),
('Recife', 'PE'),
('Manaus', 'AM');

-- Inserir dados na tabela CURSOS
INSERT INTO cursos (nome_curso) VALUES
('Análise e Desenvolvimento de Sistemas'),
('Engenharia da Computação'),
('Administração'),
('Direito'),
('Medicina'),
('Psicologia'),
('Engenharia Civil'),
('Marketing'),
('Contabilidade'),
('Design Gráfico');

-- Inserir dados na tabela ALUNOS
INSERT INTO alunos (nome_aluno, id_cidade) VALUES
('João Silva', 1),
('Maria Santos', 2),
('Pedro Oliveira', 3),
('Ana Costa', 4),
('Carlos Ferreira', 5),
('Juliana Lima', 6),
('Rafael Alves', 7),
('Fernanda Rodrigues', 8),
('Lucas Pereira', 9),
('Camila Barbosa', 10),
('Bruno Martins', 1),
('Gabriela Souza', 2),
('Thiago Nunes', 3),
('Larissa Dias', 4),
('Ricardo Gomes', 5);

-- Inserir dados na tabela MATRICULAS
INSERT INTO matriculas (id_aluno, id_curso) VALUES
(1, 1),   -- João Silva - ADS
(1, 3),   -- João Silva - Administração
(2, 2),   -- Maria Santos - Eng. Computação
(3, 4),   -- Pedro Oliveira - Direito
(4, 5),   -- Ana Costa - Medicina
(5, 6),   -- Carlos Ferreira - Psicologia
(6, 7),   -- Juliana Lima - Eng. Civil
(7, 8),   -- Rafael Alves - Marketing
(8, 9),   -- Fernanda Rodrigues - Contabilidade
(9, 10),  -- Lucas Pereira - Design Gráfico
(10, 1),  -- Camila Barbosa - ADS
(11, 2),  -- Bruno Martins - Eng. Computação
(12, 3),  -- Gabriela Souza - Administração
(13, 4),  -- Thiago Nunes - Direito
(14, 5),  -- Larissa Dias - Medicina
(15, 6),  -- Ricardo Gomes - Psicologia
(2, 8),   -- Maria Santos - Marketing (segunda matrícula)
(3, 1),   -- Pedro Oliveira - ADS (segunda matrícula)
(4, 2);   -- Ana Costa - Eng. Computação (segunda matrícula)

-- =========================================
-- 3. CONSULTAS SQL
-- =========================================

-- CONSULTA 1: Todos os alunos com seus cursos, cidades e estados
SELECT 
    a.id_aluno,
    a.nome_aluno,
    c.nome_curso,
    cid.nome_cidade,
    cid.estado,
    m.data_matricula
FROM alunos a
INNER JOIN matriculas m ON a.id_aluno = m.id_aluno
INNER JOIN cursos c ON m.id_curso = c.id_curso
INNER JOIN cidades cid ON a.id_cidade = cid.id_cidade
ORDER BY a.nome_aluno, c.nome_curso;

-- CONSULTA 2: Relatório completo por aluno (agrupado)
SELECT 
    a.nome_aluno,
    cid.nome_cidade,
    cid.estado,
    GROUP_CONCAT(c.nome_curso ORDER BY c.nome_curso SEPARATOR ', ') AS cursos_matriculados,
    COUNT(m.id_curso) AS total_cursos
FROM alunos a
INNER JOIN matriculas m ON a.id_aluno = m.id_aluno
INNER JOIN cursos c ON m.id_curso = c.id_curso
INNER JOIN cidades cid ON a.id_cidade = cid.id_cidade
GROUP BY a.id_aluno, a.nome_aluno, cid.nome_cidade, cid.estado
ORDER BY a.nome_aluno;

-- CONSULTA 3: Alunos por estado
SELECT 
    cid.estado,
    COUNT(DISTINCT a.id_aluno) as total_alunos
FROM alunos a
INNER JOIN cidades cid ON a.id_cidade = cid.id_cidade
GROUP BY cid.estado
ORDER BY total_alunos DESC;

-- CONSULTA 4: Cursos mais procurados
SELECT 
    c.nome_curso,
    COUNT(m.id_aluno) as total_matriculas
FROM cursos c
INNER JOIN matriculas m ON c.id_curso = m.id_curso
GROUP BY c.id_curso, c.nome_curso
ORDER BY total_matriculas DESC;

-- CONSULTA 5: Alunos com múltiplas matrículas
SELECT 
    a.nome_aluno,
    cid.nome_cidade,
    cid.estado,
    COUNT(m.id_curso) as total_cursos
FROM alunos a
INNER JOIN matriculas m ON a.id_aluno = m.id_aluno
INNER JOIN cidades cid ON a.id_cidade = cid.id_cidade
GROUP BY a.id_aluno, a.nome_aluno, cid.nome_cidade, cid.estado
HAVING COUNT(m.id_curso) > 1
ORDER BY total_cursos DESC;

-- =========================================
-- 4. CONSULTAS ADICIONAIS ÚTEIS
-- =========================================

-- Lista todos os alunos (mesmo sem matrícula)
SELECT 
    a.nome_aluno,
    cid.nome_cidade,
    cid.estado,
    COALESCE(c.nome_curso, 'Não matriculado') as curso
FROM alunos a
INNER JOIN cidades cid ON a.id_cidade = cid.id_cidade
LEFT JOIN matriculas m ON a.id_aluno = m.id_aluno
LEFT JOIN cursos c ON m.id_curso = c.id_curso
ORDER BY a.nome_aluno;

-- Lista todos os cursos (mesmo sem alunos)
SELECT 
    c.nome_curso,
    COUNT(m.id_aluno) as total_alunos
FROM cursos c
LEFT JOIN matriculas m ON c.id_curso = m.id_curso
GROUP BY c.id_curso, c.nome_curso
ORDER BY total_alunos DESC;

-- =========================================
-- 5. COMANDOS DE VERIFICAÇÃO
-- =========================================

-- Verificar estrutura das tabelas
DESCRIBE cidades;
DESCRIBE cursos;
DESCRIBE alunos;
DESCRIBE matriculas;

-- Contar registros em cada tabela
SELECT 'Cidades' as tabela, COUNT(*) as total FROM cidades
UNION ALL
SELECT 'Cursos' as tabela, COUNT(*) as total FROM cursos
UNION ALL
SELECT 'Alunos' as tabela, COUNT(*) as total FROM alunos
UNION ALL
SELECT 'Matrículas' as tabela, COUNT(*) as total FROM matriculas;
